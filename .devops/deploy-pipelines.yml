parameters:
  - name: SEMVER
    displayName: "When packing a release, define the version bump to apply"
    type: string
    values:
      - major
      - minor
      - patch
      - skip
    default: patch
  - name: ENV
    displayName: Target Environment
    type: string
    default: dev
    values:
      - dev
      - uat
      - prod
      - test # test: deploy on develop with H2

variables:
  ${{ if eq(parameters['ENV'], 'dev') }}:
    AZURE_SUBSCRIPTION: $(DEV_AZURE_SUBSCRIPTION)
    RESOURCE_GROUP: $(DEV_WEB_APP_RESOURCE_GROUP_NAME)
    APP_NAME: $(DEV_WEB_APP_NAME)
    STAGE: "d"
  ${{ if eq(parameters['ENV'], 'uat') }}:
    AZURE_SUBSCRIPTION: $(UAT_AZURE_SUBSCRIPTION)
    RESOURCE_GROUP: $(UAT_WEB_APP_RESOURCE_GROUP_NAME)
    APP_NAME: $(UAT_WEB_APP_NAME)
    STAGE: "u"
  ${{ if eq(parameters['ENV'], 'prod') }}:
    AZURE_SUBSCRIPTION: $(PROD_AZURE_SUBSCRIPTION)
    RESOURCE_GROUP: $(PROD_WEB_APP_RESOURCE_GROUP_NAME)
    APP_NAME: $(PROD_WEB_APP_NAME)
    STAGE: "p"
  ${{ if eq(parameters['ENV'], 'test') }}:
    AZURE_SUBSCRIPTION: $(DEV_AZURE_SUBSCRIPTION)
    RESOURCE_GROUP: $(DEV_WEB_APP_RESOURCE_GROUP_NAME)
    APP_NAME: $(DEV_WEB_APP_NAME)
    STAGE: "t"

  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: "-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)"
  title: ""
  sha: ""
  tag: ""

# Only manual triggers
trigger: none
pr: none

pool:
  vmImage: ubuntu-latest

stages:
  # Create a release on Github
  - stage: release_service
    # bump version on main branch and if SEMVER is not 'skip'
    condition: and(eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne('${{ parameters.SEMVER }}', 'skip'))
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: releaseService
        steps:
          - checkout: self
            clean: true
            persistCredentials: true

          - script: |
              git config --global user.name "$(GIT_USERNAME)"
              git config --global user.email "$(GIT_EMAIL)"

          - template: azure-templates/maven-versioning.yml
            parameters:
              semver: "${{ parameters.SEMVER }}"

          - task: Bash@3
            name: pomversion
            inputs:
              targetType: "inline"
              script: |
                version=$(mvn -f pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)
                echo "##vso[task.setvariable variable=next;isOutput=true]$version"
              failOnStderr: true

          - script: |
              HEAD_SHA=$(git rev-parse HEAD)
              TAG="$(pomversion.next)"
              TITLE="Release $(pomversion.next)"
              echo "##vso[task.setvariable variable=title]$TITLE"
              echo "##vso[task.setvariable variable=sha]$HEAD_SHA"
              echo "##vso[task.setvariable variable=tag]$TAG"

          - script: |
              git checkout ${{variables['Build.SourceBranchName']}}

          - script: |
              echo $(tag)
              echo $(title)
              echo $(sha)

          - script: |
              git add pom.xml
              git commit -m "Bump version [skip ci]"
              git push origin ${{variables['Build.SourceBranchName']}}
              git push --tags

          # create new releae
          - task: GitHubRelease@0
            inputs:
              gitHubConnection: $(GITHUB_CONNECTION)
              repositoryName: $(Build.Repository.Name)
              action: create
              target: $(sha)
              tagSource: manual
              tag: $(tag)
              title: $(title)
              addChangelog: true

  # Deploy on Azure
  - stage: deploy
    condition: not(failed('releaseService'))
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: deployJava
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
            submodules: true

          - task: Bash@3
            name: application_properties
            inputs:
              targetType: "inline"
              script: |
                cp src/main/resources/application-azure-$(STAGE).properties src/main/resources/application.properties
              failOnStderr: true

          - task: Cache@2
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
            displayName: Set Maven Cache

          - task: Bash@3
            name: pomversion
            inputs:
              targetType: "inline"
              script: |
                version=$(mvn -f pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)
                echo "##vso[task.setvariable variable=next;isOutput=true]$version"
              failOnStderr: true

          - task: Bash@3
            name: build
            inputs:
              targetType: "inline"
              script: |
                mvn package
              failOnStderr: true

          - task: Bash@3
            name: show_target
            inputs:
              targetType: "inline"
              script: |
                ls ./target/
                echo "Deploy ... "
                echo ./target/api-config-$(pomversion.next).jar
              failOnStderr: true

          - task: AzureCLI@1
            displayName: 'Deploy'
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              scriptLocation: inlineScript
              inlineScript: |
                az webapp deploy --clean true --resource-group $(RESOURCE_GROUP) --name $(APP_NAME) --src-path ./target/api-config-$(pomversion.next).jar  --type jar


  - stage: test
    # run stage 'test' only if ENV is equal to 'test'
    condition: and(not(failed('deployJava')), eq('${{ parameters.ENV }}', 'test'))
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      # is needed to wait for startup of application
      - job: waitStartup
        pool: Server
        steps:
          - task: Delay@1
            inputs:
              delayForMinutes: '2'

      - job: integrationTests
        dependsOn: waitStartup
        steps:
          - script: |
              yarn global add newman
            displayName: 'newman installation'

          - script: |
              yarn add jquery
              bash api-test/setup_env_api_test.sh $(STAGE)

          - script: |
              newman run api-test/ApiConfig.postman_collection.json --environment=api-test/Azure.postman_environment.json --reporters cli,junit --reporter-junit-export Results/api-config-TEST.xml
            displayName: 'Run api test'
            continueOnError: true

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/*-TEST.xml'
              searchFolder: '$(System.DefaultWorkingDirectory)'

      - job: loadTests
        dependsOn: waitStartup
        steps:
          - script: |
              yarn add jquery
              bash api-test/setup_env_api_test.sh $(STAGE)

          - script: |
              yarn global add postman-to-k6
            displayName: 'postman-to-k6 installation'
          - script: |
              sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
              echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
              sudo apt-get update
              sudo apt-get install k6
            displayName: 'k6 installation'

          - script: |
              postman-to-k6  api-test/ApiConfig.postman_collection.json -e api-test/Azure.postman_environment.json -o k6-script.js
            displayName: 'Generate load test'
            continueOnError: true

          - script: |
              k6 run --vus 2 --duration 30s k6-script.js
            displayName: 'Run load test'
            continueOnError: true




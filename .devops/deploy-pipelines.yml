parameters:
  - name: ENV
    displayName: Target Environment
    type: string
    default: dev
    values:
      - dev
      - uat
      - prod
  - name: SEMVER
    displayName: "When packing a release, define the version bump to apply. Use only buildNumber or skip for manual deployment"
    type: string
    values:
      - major
      - minor
      - patch
      - buildNumber
      - skip
    default: skip
  - name: TEST
    displayName: Run tests
    type: boolean
    default: false

variables:
  ${{ if eq(parameters['ENV'], 'dev') }}:
    AZURE_SUBSCRIPTION: $(DEV_AZURE_SUBSCRIPTION)
    RESOURCE_GROUP: $(DEV_WEB_APP_RESOURCE_GROUP_NAME)
    APP_NAME: $(DEV_WEB_APP_NAME)
    STAGE: "d"
    dockerRegistryServiceConnection: $(DEV_CONTAINER_REGISTRY)
    dockerNamespace: $(DEV_CONTAINER_NAMESPACE)
  ${{ if eq(parameters['ENV'], 'uat') }}:
    AZURE_SUBSCRIPTION: $(UAT_AZURE_SUBSCRIPTION)
    RESOURCE_GROUP: $(UAT_WEB_APP_RESOURCE_GROUP_NAME)
    APP_NAME: $(UAT_WEB_APP_NAME)
    STAGE: "u"
    dockerRegistryServiceConnection: $(UAT_CONTAINER_REGISTRY)
    dockerNamespace: $(UAT_CONTAINER_NAMESPACE)
  ${{ if eq(parameters['ENV'], 'prod') }}:
    AZURE_SUBSCRIPTION: $(PROD_AZURE_SUBSCRIPTION)
    RESOURCE_GROUP: $(PROD_WEB_APP_RESOURCE_GROUP_NAME)
    APP_NAME: $(PROD_WEB_APP_NAME)
    STAGE: "p"
    dockerRegistryServiceConnection: $(PROD_CONTAINER_REGISTRY)
    dockerNamespace: $(PROD_CONTAINER_NAMESPACE)
  # GitHub action use 'merge' as value of SourceBranchName
  ${{ if eq(variables['Build.SourceBranchName'], 'merge') }}:
    SOURCE_BRANCH: "main" # force to main branch
  ${{ if ne(variables['Build.SourceBranchName'], 'merge') }}:
    SOURCE_BRANCH: ${{ variables['Build.SourceBranchName'] }}

  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: "-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)"
  title: ""
  sha: ""
  tag: ""

trigger: none
pr: none

pool:
  vmImage: ubuntu-latest

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v2.1.0
      endpoint: 'io-azure-devops-github-ro'

stages:

  # Create a release on GitHub
  - stage: release_service
    condition: ne('${{ parameters.SEMVER }}', 'skip')
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: releaseService
        steps:
          - checkout: self
            clean: true
            persistCredentials: true

          - template: templates/maven-github-release/template.yaml@pagopaCommons
            parameters:
              release_branch: $(SOURCE_BRANCH)
              gitEmail: $(GIT_EMAIL)
              gitUsername: $(GIT_USERNAME)
              gitHubConnection: $(GITHUB_CONNECTION)
              ${{ if eq(parameters.SEMVER, 'skip') }}:
                semver: 'buildNumber'
              ${{ if ne(parameters.SEMVER, 'skip') }}:
                semver: '${{ parameters.SEMVER }}'


  # Deploy on Azure
  - stage: deploy
    condition: not(failed('releaseService'))
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: deployJava
        steps:

          - script: |
              echo ${{variables['Build.SourceBranchName']}}        
              echo $(SOURCE_BRANCH)
              echo $(TEST)

          - checkout: self
            clean: true
            persistCredentials: true
            submodules: true

          - script: |
              git checkout $(SOURCE_BRANCH)

          - task: Bash@3
            name: application_properties
            inputs:
              targetType: "inline"
              script: |
                cp src/main/resources/application-azure-$(STAGE).properties src/main/resources/application.properties
                cat src/main/resources/application.properties
              failOnStderr: true

          - task: Cache@2
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
            displayName: Set Maven Cache

          - task: Bash@3
            name: pomversion
            inputs:
              targetType: "inline"
              script: |
                version=$(mvn -f pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)
                echo "##vso[task.setvariable variable=next;isOutput=true]$version"
              failOnStderr: true

          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              publishJUnitResults: false
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.11'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false

          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(IMAGE_REPOSITORY)'
              command: 'buildAndPush'
              tags: |
                $(Build.BuildId)
                latest
                $(pomversion.next)

          - task: AzureRMWebAppDeployment@4
            displayName: Azure App Service Deploy
            inputs:
              appType: webAppContainer
              ConnectedServiceName: '$(AZURE_SUBSCRIPTION)'
              WebAppName: '$(APP_NAME)'
              DockerNamespace: '$(dockerNamespace)'
              DockerRepository: '$(IMAGE_REPOSITORY)'
              DockerImageTag: '$(Build.BuildId)'

          - script: |
              echo "##vso[task.setvariable variable=version;isOutput=true]$(pomversion.next)"
            name: dockerTag


  # Run test
  - stage: test
    # run this stage only if 'test' is enabled
    condition: and(not(failed('deployJava')), eq('${{ parameters.TEST }}', 'true'))
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      # is needed to wait for startup of application
      - job: waitStartup
        pool: Server
        steps:
          - task: Delay@1
            inputs:
              delayForMinutes: '10'

      - job: integrationTests
        dependsOn: waitStartup
        steps:
          - script: |
              git checkout $(SOURCE_BRANCH)

          - script: |
              yarn global add newman
            displayName: 'newman installation'

          - script: |
              yarn add jquery
              bash api-test/setup_env_api_test.sh $(STAGE)

          - script: |
              newman run api-test/ApiConfig.postman_collection.json --environment=api-test/Azure.postman_environment.json --reporters cli,junit --reporter-junit-export Results/api-config-TEST.xml --delay-request 500 --verbose
            displayName: 'Run api test'
            continueOnError: false

          - task: PublishTestResults@2
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/*-TEST.xml'
              searchFolder: '$(System.DefaultWorkingDirectory)'

      #      - job: loadTests
      #        dependsOn: waitStartup
      #        steps:
      #          - script: |
      #              yarn add jquery
      #              bash api-test/setup_env_api_test.sh $(STAGE)
      #
      #          - script: |
      #              yarn global add @apideck/postman-to-k6
      #            displayName: 'postman-to-k6 installation'
      #          - script: |
      #              sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
      #              echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
      #              sudo apt-get update
      #              sudo apt-get install k6
      #            displayName: 'k6 installation'
      #
      #          - script: |
      #              bash api-test/postman-to-k6-converter.sh api-test/Azure.postman_environment.json
      #            displayName: 'Generate load test'
      #            continueOnError: true
      #
      #          - script: |
      #              k6 run --vus 2 --duration 30s ./k6-script.js
      #            displayName: 'Run load test'
      #            continueOnError: true

      - job: deployUAT
        dependsOn: integrationTests
        variables:
          version: $[ stageDependencies.deploy.deployJava.outputs['dockerTag.version'] ]
        steps:
          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              publishJUnitResults: false
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.11'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false

          - task: Docker@2
            displayName: Build and push an image to UAT container registry
            inputs:
              containerRegistry: '$(UAT_CONTAINER_REGISTRY)'
              repository: '$(IMAGE_REPOSITORY)'
              command: 'buildAndPush'
              tags: |
                $(Build.BuildId)
                latest
                $(version)

          - task: AzureRMWebAppDeployment@4
            displayName: Azure App Service Deploy in UAT
            inputs:
              appType: webAppContainer
              ConnectedServiceName: '$(UAT_AZURE_SUBSCRIPTION)'
              WebAppName: '$(UAT_WEB_APP_NAME)'
              DockerNamespace: '$(UAT_CONTAINER_NAMESPACE)'
              DockerRepository: '$(UAT_AZURE_SUBSCRIPTION)'
              DockerImageTag: '$(Build.BuildId)'

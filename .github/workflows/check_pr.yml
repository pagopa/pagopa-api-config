name: Check PR

# Controls when the workflow will run
on:
  pull_request:
    branches:
      - main
    types: [ opened, synchronize, labeled, unlabeled, reopened, edited ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  pull-requests: write


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  auto_assign:
    name: Auto Assign

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Assign Me
        # You may pin to the exact commit or the version.
        uses: kentaro-m/auto-assign-action@v1.2.1
        with:
          configuration-path: '.github/auto_assign.yml'

  check_labels:
    name: Check Required Labels
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Verify PR Labels
        if: ${{ !contains(github.event.pull_request.labels.*.name, 'breaking-change') && !contains(github.event.pull_request.labels.*.name, 'enhancement') && !contains(github.event.pull_request.labels.*.name, 'bug') && !contains(github.event.pull_request.labels.*.name, 'ignore-for-release') }}
        uses: actions/github-script@v6.3.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'This pull request does not contain a valid label. Please add one of the following labels: `[bug, enhancement, breaking-change, ignore-for-release]`'
            })
            core.setFailed('Missing required labels')

  check_size:
    runs-on: ubuntu-latest
    name: Check Size
    steps:
      - uses: actions/checkout@v3

      - name: Check Size
        uses: actions/github-script@v6.3.3
        env:
          IGNORED_FILES: openapi.json, swagger.json
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const additions = context.payload.pull_request.additions || 0
            const deletions = context.payload.pull_request.deletions || 0
            var changes = additions + deletions

            const { IGNORED_FILES } = process.env
            const ignored_files = IGNORED_FILES.trim().split(',').filter(word => word.length > 0);
            if (ignored_files.length > 0){
              var ignored = 0
              const execSync = require('child_process').execSync;
              for (const file of IGNORED_FILES.trim().split(',')) {
            
                const ignored_additions = execSync('git --no-pager  diff --numstat | grep ' + file + ' | cut -f 1', { encoding: 'utf-8' })
                const ignored_deletions = execSync('git --no-pager  diff --numstat | grep ' + file + ' | cut -f 2', { encoding: 'utf-8' })
            
                ignored += (parseInt(ignored_additions || 0) + parseInt(ignored_deletions || 0))
              }
              changes -= ignored
            }
            
            if (changes < 200){
              github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['size/small']
              })
            
            
              var labels = await github.rest.issues.listLabelsOnIssue({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo
              });

              if (labels.data.find(label => label.name == 'size/large')){
                github.rest.issues.removeLabel({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: 'size/large'
                })
              }
            }

            if (changes > 400){
              github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['size/large']
              })
              
              var comments = await github.rest.issues.listComments({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo
              })
              for (const comment of comments.data) {
                if (comment.body.includes('This PR exceeds the recommended size')){
                  github.rest.issues.deleteComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    comment_id: comment.id
                  })
                }
              }

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: 'This PR exceeds the recommended size of 400 lines. Please make sure you are NOT addressing multiple issues with one PR. _Note this PR might be rejected due to its size._'
              })
            
              var labels = await github.rest.issues.listLabelsOnIssue({
                 issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo
              });

              if (labels.data.find(label => label.name == 'size/small')){
                github.rest.issues.removeLabel({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: 'size/small'
                })
              }
            
              core.setFailed('PR is too large')
            }


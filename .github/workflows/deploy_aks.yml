name: Deploy

# Controls when the workflow will run
on:
  pull_request:
    branches:
      - main
    types: [ closed ]


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        description: Select the Environment
        options:
          - dev
          - uat
          - prod
          - all
      semver:
        required: true
        type: choice
        description: Select the new Semantic Version
        options:
          - major
          - minor
          - patch
          - buildNumber
          - skip
      force_push_image:
        required: false
        type: boolean
        description: To Re-build and push the docker image
        default: false


env:
  NAMESPACE: apiconfig
  APP_NAME: pagopaapiconfig
  TARGET: apim_api_apiconfig_core_api_v1


permissions:
  packages: write
  contents: write
  issues: write
  id-token: write
  actions: read


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      semver: ${{ steps.output.outputs.semver }}
      environment: ${{ steps.output.outputs.environment }}
    steps:
      - if: ${{ contains(github.event.pull_request.labels.*.name, 'breaking-change') || github.event.inputs.semver == 'major' }}
        run: echo "SEMVER=major" >> $GITHUB_ENV

      - if: ${{ contains(github.event.pull_request.labels.*.name, 'enhancement') || github.event.inputs.semver == 'minor' }}
        run: echo "SEMVER=minor" >> $GITHUB_ENV

      - if: ${{ contains(github.event.pull_request.labels.*.name, 'bug') || github.event.inputs.semver == 'patch' }}
        run: echo "SEMVER=patch" >> $GITHUB_ENV

      - if: ${{ contains(github.event.pull_request.labels.*.name, 'ignore-for-release') || github.event.inputs.semver == 'skip' }}
        run: echo "SEMVER=skip" >> $GITHUB_ENV

      - if: ${{ github.event.inputs.semver == 'buildNumber' }}
        run: echo "SEMVER=buildNumber" >> $GITHUB_ENV

      - if: ${{ github.event.inputs.environment == null || github.event.inputs.environment == 'dev' }}
        run: echo "ENVIRNOMENT=dev" >> $GITHUB_ENV

      - if: ${{ github.event.inputs.environment == 'uat' }}
        run: echo "ENVIRNOMENT=uat" >> $GITHUB_ENV

      - if: ${{ github.event.inputs.environment == 'prod' }}
        run: echo "ENVIRNOMENT=prod" >> $GITHUB_ENV

      - if: ${{ github.event.inputs.environment == 'all' }}
        run: echo "ENVIRNOMENT=all" >> $GITHUB_ENV

      - id: output
        name: Set Output
        run: |
          echo "semver=${{env.SEMVER}}" >> $GITHUB_OUTPUT
          echo "environment=${{env.ENVIRNOMENT}}" >> $GITHUB_OUTPUT


  release:
    name: Create a New Release
    needs: [setup]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name}}
          token: ${{ secrets.API_TOKEN_GITHUB }}

      - name: Dump GitHub context
        run: echo $JSON
        env:
          JSON: ${{ toJSON(github) }}

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.8.2
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Set branch
        run: |
          echo "BRANCH=-${{github.ref_name}}" >> $GITHUB_ENV
        if: ${{ github.ref_name != 'main' }}

      - name: Set build-number
        run: |
          mvn build-helper:parse-version versions:set -DnewVersion='${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}-${parsedVersion.nextBuildNumber}${{env.BRANCH}}'
        if: ${{ needs.setup.outputs.semver == 'buildNumber' }}

      - name: Set major
        run: |
          mvn build-helper:parse-version versions:set -DnewVersion='${parsedVersion.nextMajorVersion}.0.0${{env.BRANCH}}'
        if: ${{ needs.setup.outputs.semver == 'major' }}

      - name: Set minor
        run: |
          mvn build-helper:parse-version versions:set -DnewVersion='${parsedVersion.majorVersion}.${parsedVersion.nextMinorVersion}.0${{env.BRANCH}}'
        if: ${{ needs.setup.outputs.semver == 'minor' }}

      - name: Set patch
        run: |
          mvn build-helper:parse-version versions:set -DnewVersion='${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.nextIncrementalVersion}${{env.BRANCH}}'
        if: ${{ needs.setup.outputs.semver == 'patch' }}

      - id: get_version
        name: Get Version
        run: |
          echo "$(mvn -f pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)"
          echo "version=$(mvn -f pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT

      - name: Update Version Helm
        if: ${{ needs.setup.outputs.semver != 'skip' }}
        run: |
          for i in helm/values-*.yaml; do
            [ -f "$i" ] || break
            yq -i ".microservice-chart.image.tag = \"${{ steps.get_version.outputs.version }}\"" "$i"
            git add "$i"
          done
          CHART_FILE="helm/Chart.yaml"
          if [[ -f "$CHART_FILE" ]]; then
            yq -i ".version = \"${{ steps.get_version.outputs.version }}\"" "$CHART_FILE"
            yq -i ".appVersion = \"${{ steps.get_version.outputs.version }}\"" "$CHART_FILE"
            git add "$CHART_FILE"
          fi
      - name: Update Openapi/Swagger Version
        if: ${{ needs.setup.outputs.semver != 'skip' }}
        run: |
          for i in openapi/*.json; do
            [ -f "$i" ] || break
            cat <<< "$(jq ".info.version = \"${{ steps.get_version.outputs.version }}\"" "$i")" > "$i"
            git add $i
          done
          for i in openapi/*.yaml; do
            [ -f "$i" ] || break
            yq -i ".info.version = \"${{ steps.get_version.outputs.version }}\"" "$i"
            git add "$i"
          done
          for i in openapi/*.yml; do
            [ -f "$i" ] || break
            yq -i ".info.version = \"${{ steps.get_version.outputs.version }}\"" "$i"
            git add "$i"
          done

      - name: Push New Version
        if: ${{ needs.setup.outputs.semver != 'skip' }}
        run: |
          echo "${{ steps.get_version.outputs.version }}"
          git ls-files . | grep 'pom.xml'  | xargs git add
          git config --global user.email "github-bot@pagopa.it"
          git config --global user.name "pagopa-github-bot"
          git commit -m "Bump version [skip ci]" || exit 0
          git push origin ${{ github.ref_name}}

      - name: Create Release
        if: ${{ needs.setup.outputs.semver != 'skip' }}
        uses: ncipollo/release-action@v1.12.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          makeLatest: latest
          generateReleaseNotes: true


  build:
    needs: [setup, release]
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    if: ${{ !(needs.setup.outputs.semver == 'skip') || (github.event.inputs.force_push_image == 'true') }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name}}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            latest
            ${{ needs.release.outputs.version }}
            type=ref,event=branch
            type=sha
            ${{ github.event.inputs.environment != null && github.event.inputs.environment || 'dev'  }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
    # TODO remember to add the package write permissions to the action https://github.com/users/<OWNER>/packages/container/<REPOSITORY>/settings

  deploy:
    needs: [setup, release, build]
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    runs-on: ubuntu-latest
    name: Deploy on AKS
    strategy:
      matrix:
        environment: [ dev, uat, prod ]
        include:
          - environment : dev
            short: d
          - environment : uat
            short: u
          - environment : prod
            short: p
    environment:
      name: ${{ matrix.environment }}
    steps:
      - uses: actions/checkout@v3
        if: ${{ matrix.environment == needs.setup.outputs.environment || needs.setup.outputs.environment == 'all' }}
        with:
          ref: ${{ github.ref_name}}

      - name: Read terraform version
        if: ${{ matrix.environment == needs.setup.outputs.environment || needs.setup.outputs.environment == 'all' }}
        shell: bash
        run: |
          echo "TERRAFORM_VERSION=`cat .terraform-version`" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@8feba2b913ea459066180f9cb177f58a881cf146
        if: ${{ matrix.environment == needs.setup.outputs.environment || needs.setup.outputs.environment == 'all' }}
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Set up kubelogin for non-interactive login
        if: ${{ matrix.environment == needs.setup.outputs.environment || needs.setup.outputs.environment == 'all' }}
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.24'

      - name: Login
        if: ${{ matrix.environment == needs.setup.outputs.environment || needs.setup.outputs.environment == 'all' }}
        uses: azure/login@89d153571fe9a34ed70fcf9f1d95ab8debea7a73
        with:
          client-id: ${{ vars.CLIENT_ID }}
          tenant-id: ${{ vars.TENANT_ID }}
          subscription-id: ${{ vars.SUBSCRIPTION_ID }}

#      - name: Build image on ACR
#        if: ${{ (github.event.inputs.environment == null && matrix.environment == 'dev' ) || matrix.environment == github.event.inputs.environment || github.event.inputs.environment == 'all' }}
#        run: |
#          az configure --defaults acr=pagopa${{ matrix.short }}commonacr
#          az acr build --image ${{ env.APP_NAME }}:${{ needs.release.outputs.version }} --registry pagopa${{ matrix.short }}commonacr .

      - name: Gets K8s context
        if: ${{ matrix.environment == needs.setup.outputs.environment || needs.setup.outputs.environment == 'all' }}
        uses: azure/aks-set-context@v3
        with:
          resource-group: pagopa-${{matrix.short}}-weu-dev-aks-rg
          cluster-name: pagopa-${{matrix.short}}-weu-dev-aks
          admin: 'false'
          use-kubelogin: 'true'

      - name: Helm Setup
        if: ${{ matrix.environment == needs.setup.outputs.environment || needs.setup.outputs.environment == 'all' }}
        run: |
          helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
          helm dep build helm

      - name: Helm Deploy
        if: ${{ matrix.environment == needs.setup.outputs.environment || needs.setup.outputs.environment == 'all' }}
        run: helm upgrade --namespace ${{ env.NAMESPACE }}
          --install --values ./helm/values-${{ matrix.environment }}.yaml
          --set microservice-chart.image.tag=${{ needs.release.outputs.version }}
          --wait --timeout 5m0s
          ${{ env.APP_NAME }} ./helm

        # TODO log deployment successful on App Insights

  update_infra:
    name: Update Infra
    runs-on: ubuntu-22.04
    needs: [ deploy ]
    strategy:
      matrix:
        environment: [ dev, uat, prod ]
    environment:
      name: ${{ matrix.environment }}
    steps:
      - name: Checkout
        if: ${{ (github.event.inputs.environment == null && matrix.environment == 'dev' ) || matrix.environment == github.event.inputs.environment || github.event.inputs.environment == 'all' }}
        uses: actions/checkout@v3

      # prepare openapi template for infra repo
      - name: Prepare openapi.json
        if: ${{ (github.event.inputs.environment == null && matrix.environment == 'dev' ) || matrix.environment == github.event.inputs.environment || github.event.inputs.environment == 'all' }}
        run: |
          mkdir -p "${GITHUB_WORKSPACE}/infra"
          jq  '."servers"[0]."url" |= "${host}"' "${GITHUB_WORKSPACE}/openapi/openapi.json" > "${GITHUB_WORKSPACE}/infra/_openapi.json.tpl"

      - name: Setup Terraform
        if: ${{ (github.event.inputs.environment == null && matrix.environment == 'dev' ) || matrix.environment == github.event.inputs.environment || github.event.inputs.environment == 'all' }}
        uses: hashicorp/setup-terraform@8feba2b913ea459066180f9cb177f58a881cf146
        with:
          terraform_version: 1.3.6

      - name: Login
        id: login
        if: ${{ (github.event.inputs.environment == null && matrix.environment == 'dev' ) || matrix.environment == github.event.inputs.environment || github.event.inputs.environment == 'all' }}
        uses: azure/login@92a5484dfaf04ca78a94597f4f19fea633851fa2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Clone Infra
        if: ${{ (github.event.inputs.environment == null && matrix.environment == 'dev' ) || matrix.environment == github.event.inputs.environment || github.event.inputs.environment == 'all' }}
        run: |
          git clone https://github.com/pagopa/pagopa-infra
          cp "${GITHUB_WORKSPACE}/infra/_openapi.json.tpl" > "${GITHUB_WORKSPACE}/pagopa-infra/src/domains/apiconfig-app/api/apiconfig-core/v1/_openapi.json.tpl"

      - name: Terraform Apply
        if: ${{ (github.event.inputs.environment == null && matrix.environment == 'dev' ) || matrix.environment == github.event.inputs.environment || github.event.inputs.environment == 'all' }}
        shell: bash
        run: |
          cd ./pagopa-infra/src/domains/apiconfig-app
          bash ./terraform.sh apply weu-${{ matrix.environment }} -auto-approve -target=module.${{ env.TARGET }}
        # TODO remove target?


#  notify:
#    needs: [ update_infra ]
#    runs-on: ubuntu-latest
#    name: Notify
#    if: always()
#    steps:
#      - name: Report Status
#        if: always()
#        uses: ravsamhq/notify-slack-action@v2
#        with:
#          status: ${{ needs.update_infra.result }}
#          token: ${{ secrets.GITHUB_TOKEN }}
#          notify_when: 'failure,skipped'
#          notification_title: '{workflow} has {status_message}'
#          message_format: '{emoji} <{workflow_url}|{workflow}> {status_message} in <{repo_url}|{repo}>'
#          footer: 'Linked to Repo <{repo_url}|{repo}>'
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

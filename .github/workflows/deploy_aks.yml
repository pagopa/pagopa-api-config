name: Deploy

# Controls when the workflow will run
on:
  pull_request:
    branches:
      - main
    types: [ closed ]


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        description: Select the Environment
        options:
          - dev
          - uat
          - prod
          - all
      semver:
        required: true
        type: choice
        description: Select the new Semantic Version
        options:
          - major
          - minor
          - patch
          - buildNumber
          - skip
      force_push_image:
        required: false
        type: boolean
        description: To Re-build and push the docker image
        default: false


env:
  NAMESPACE: apiconfig
  APP_NAME: pagopaapiconfig
  TARGET: apim_api_apiconfig_core_api_v1


permissions:
  packages: write
  contents: write
  issues: write
  id-token: write
  actions: read


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      semver: ${{ steps.output.outputs.semver }}
      environment: ${{ steps.output.outputs.environment }}
    steps:
      - if: ${{ contains(github.event.pull_request.labels.*.name, 'breaking-change') || github.event.inputs.semver == 'major' }}
        run: echo "SEMVER=major" >> $GITHUB_ENV

      - if: ${{ contains(github.event.pull_request.labels.*.name, 'enhancement') || github.event.inputs.semver == 'minor' }}
        run: echo "SEMVER=minor" >> $GITHUB_ENV

      - if: ${{ contains(github.event.pull_request.labels.*.name, 'bug') || github.event.inputs.semver == 'patch' }}
        run: echo "SEMVER=patch" >> $GITHUB_ENV

      - if: ${{ contains(github.event.pull_request.labels.*.name, 'ignore-for-release') || github.event.inputs.semver == 'skip' }}
        run: echo "SEMVER=skip" >> $GITHUB_ENV

      - if: ${{ github.event.inputs.semver == 'buildNumber' }}
        run: echo "SEMVER=buildNumber" >> $GITHUB_ENV

      - if: ${{ github.event.inputs.environment == null || github.event.inputs.environment == 'dev' }}
        run: echo "ENVIRNOMENT=dev" >> $GITHUB_ENV

      - if: ${{ github.event.inputs.environment == 'uat' }}
        run: echo "ENVIRNOMENT=uat" >> $GITHUB_ENV

      - if: ${{ github.event.inputs.environment == 'prod' }}
        run: echo "ENVIRNOMENT=prod" >> $GITHUB_ENV

      - if: ${{ github.event.inputs.environment == 'all' }}
        run: echo "ENVIRNOMENT=all" >> $GITHUB_ENV

      - id: output
        name: Set Output
        run: |
          echo "semver=${{env.SEMVER}}" >> $GITHUB_OUTPUT
          echo "environment=${{env.ENVIRNOMENT}}" >> $GITHUB_OUTPUT


  release:
    name: Create a New Release
    needs: [setup]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release.outputs.version }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Dump GitHub context
        run: echo $JSON
        env:
          JSON: ${{ toJSON(github) }}

      - name: Make Release
        id: release
        uses: pagopa/github-actions-template/release@main
        with:
          semver: ${{needs.setup.outputs.semver}}
          github_token: ${{ secrets.API_TOKEN_GITHUB }}

  build:
    needs: [setup, release]
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    if: ${{ !(needs.setup.outputs.semver == 'skip') || (github.event.inputs.force_push_image == 'true') }}
    steps:
      - name: Build and Push
        id: semver
        uses: pagopa/github-actions-template/ghcr-build-push@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref_name}}
          tag: ${{ needs.release.outputs.version }}

  deploy:
    needs: [setup, release, build]
    if: |
      always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    runs-on: ubuntu-latest
    name: Deploy on AKS
    strategy:
      matrix:
        environment: [ dev, uat, prod ]
        include:
          - environment : dev
            short: d
          - environment : uat
            short: u
          - environment : prod
            short: p
    environment:
      name: ${{ matrix.environment }}
    steps:
      - name: Deploy
        if: ${{ matrix.environment == needs.setup.outputs.environment || needs.setup.outputs.environment == 'all' }}
        uses: pagopa/github-actions-template/aks-deploy@v1
        with:
          client_id: ${{ vars.CLIENT_ID }}
          subscription_id: ${{ vars.SUBSCRIPTION_ID }}
          tenant_id: ${{ vars.TENANT_ID }}
          env: ${{ matrix.environment }}
          namespace: ${{ env.NAMESPACE }}
          cluster_name: pagopa-${{matrix.short}}-weu-dev-aks
          resource_group: pagopa-${{matrix.short}}-weu-dev-aks-rg
          version: ${{ needs.release.outputs.version }}
          app_name: ${{ env.APP_NAME }}

        # TODO log deployment successful on App Insights

  update_infra:
    name: Update Infra
    runs-on: ubuntu-22.04
    needs: [ deploy ]
    strategy:
      matrix:
        environment: [ dev, uat, prod ]
    environment:
      name: ${{ matrix.environment }}
    steps:
      - name: Checkout
        if: ${{ (github.event.inputs.environment == null && matrix.environment == 'dev' ) || matrix.environment == github.event.inputs.environment || github.event.inputs.environment == 'all' }}
        uses: actions/checkout@v3

      # prepare openapi template for infra repo
      - name: Prepare openapi.json
        if: ${{ (github.event.inputs.environment == null && matrix.environment == 'dev' ) || matrix.environment == github.event.inputs.environment || github.event.inputs.environment == 'all' }}
        run: |
          mkdir -p "${GITHUB_WORKSPACE}/infra"
          jq  '."servers"[0]."url" |= "${host}"' "${GITHUB_WORKSPACE}/openapi/openapi.json" > "${GITHUB_WORKSPACE}/infra/_openapi.json.tpl"

      - name: Setup Terraform
        if: ${{ (github.event.inputs.environment == null && matrix.environment == 'dev' ) || matrix.environment == github.event.inputs.environment || github.event.inputs.environment == 'all' }}
        uses: hashicorp/setup-terraform@8feba2b913ea459066180f9cb177f58a881cf146
        with:
          terraform_version: 1.3.6

      - name: Login
        id: login
        if: ${{ (github.event.inputs.environment == null && matrix.environment == 'dev' ) || matrix.environment == github.event.inputs.environment || github.event.inputs.environment == 'all' }}
        uses: azure/login@92a5484dfaf04ca78a94597f4f19fea633851fa2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Clone Infra
        if: ${{ (github.event.inputs.environment == null && matrix.environment == 'dev' ) || matrix.environment == github.event.inputs.environment || github.event.inputs.environment == 'all' }}
        run: |
          git clone https://github.com/pagopa/pagopa-infra
          cp "${GITHUB_WORKSPACE}/infra/_openapi.json.tpl" > "${GITHUB_WORKSPACE}/pagopa-infra/src/domains/apiconfig-app/api/apiconfig-core/v1/_openapi.json.tpl"

      - name: Terraform Apply
        if: ${{ (github.event.inputs.environment == null && matrix.environment == 'dev' ) || matrix.environment == github.event.inputs.environment || github.event.inputs.environment == 'all' }}
        shell: bash
        run: |
          cd ./pagopa-infra/src/domains/apiconfig-app
          bash ./terraform.sh apply weu-${{ matrix.environment }} -auto-approve -target=module.${{ env.TARGET }}
        # TODO remove target?


  notify:
    needs: [ update_infra ]
    runs-on: ubuntu-latest
    name: Notify
    if: always()
    steps:
      - name: Report Status
        if: always()
        uses: ravsamhq/notify-slack-action@v2
        with:
          status: ${{ needs.update_infra.result }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notify_when: 'failure,skipped'
          notification_title: '{workflow} has {status_message}'
          message_format: '{emoji} <{workflow_url}|{workflow}> {status_message} in <{repo_url}|{repo}>'
          footer: 'Linked to Repo <{repo_url}|{repo}>'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

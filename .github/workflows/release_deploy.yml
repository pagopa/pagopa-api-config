name: Release And Deploy

# Controls when the workflow will run
on:
  pull_request:
    branches:
      - main
    types: [ closed ]


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        description: Select the Environment
        options:
          - dev
          - uat
          - prod
          - all
      semver:
        required: true
        type: choice
        description: Select the new Semantic Version
        options:
          - major
          - minor
          - patch
          - buildNumber
          - skip
        default: skip
      beta:
        required: false
        type: boolean
        description: deploy beta version on AKS
        default: false

permissions:
  packages: write
  contents: write
  issues: write
  id-token: write
  actions: read


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      semver: ${{ steps.get_semver.outputs.semver }}
      environment: ${{ steps.output.outputs.environment }}
    steps:
      - name: Get semver
        id: get_semver
        uses: pagopa/github-actions-template/semver-setup@1.3.0

      - if: ${{ github.event.inputs.environment == null || github.event.inputs.environment == 'dev' }}
        run: echo "ENVIRNOMENT=dev" >> $GITHUB_ENV

      - if: ${{ github.event.inputs.environment == 'uat' }}
        run: echo "ENVIRNOMENT=uat" >> $GITHUB_ENV

      - if: ${{ github.event.inputs.environment == 'prod' }}
        run: echo "ENVIRNOMENT=prod" >> $GITHUB_ENV

      - if: ${{ github.event.inputs.environment == 'all' }}
        run: echo "ENVIRNOMENT=all" >> $GITHUB_ENV

      - id: output
        name: Set Output
        run: |
          echo "environment=${{env.ENVIRNOMENT}}" >> $GITHUB_OUTPUT


  release:
    name: Create a New Release
    runs-on: ubuntu-latest
    needs: [setup]
    outputs:
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: Make Release
        id: release
        uses: pagopa/github-actions-template/maven-release@main
        with:
          semver: ${{ needs.setup.outputs.semver }}
          github_token: ${{ secrets.BOT_TOKEN_GITHUB }}

  image:
    needs: [ setup, release ]
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: ${{ inputs.semver != 'skip' }}
    steps:
      - name: Build and Push
        id: semver
        uses: pagopa/github-actions-template/ghcr-build-push@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref_name}}
          tag: ${{ needs.release.outputs.version }}

#  create_runner:
#    name: Create Runner
#    runs-on: ubuntu-22.04
#    needs: [ setup, release, image ]
#    if: ${{ always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
#
##    strategy:
##      matrix:
##        environment: [prod, uat, dev]
#    environment:
#      name: ${{ needs.setup.outputs.environment }}
#    outputs:
#      runner_name: ${{ steps.create_github_runner.outputs.runner_name }}
#    steps:
#      - name: Dump GitHub context
#        run: |
#          echo $CONTEXT
#          echo $VARIABLES
#          echo $IN
#          echo $OUT
#        env:
#          CONTEXT: ${{ toJSON(github) }}
#          VARIABLES: ${{ vars.CLIENT_ID }}
#          IN: ${{ toJSON(inputs) }}
#          OUT: ${{ toJSON(needs.setup.outputs) }}
#
#      - name: Create GitHub Runner
##        if: ${{ matrix.environment == needs.setup.outputs.environment || needs.setup.outputs.environment == 'all' }}
#        id: create_github_runner
#        # from https://github.com/pagopa/github-self-hosted-runner-azure-create-action/commits/main
#        uses: pagopa/github-self-hosted-runner-azure-create-action@b4590e069e753daee6bc9809d484523cc7026035
#        with:
#          client_id: ${{ vars.CLIENT_ID }}
#          tenant_id: ${{ vars.TENANT_ID }}
#          subscription_id: ${{ vars.SUBSCRIPTION_ID }}
#          container_app_environment_name: ${{ vars.CONTAINER_APP_ENVIRONMENT_NAME }}
#          resource_group_name: ${{ vars.RESOURCE_GROUP_NAME }} # RG of the runner
#          pat_token: ${{ secrets.BOT_TOKEN_GITHUB }}

#  deploy:
#    name: Deploy on AKS
#    needs: [ setup, release, image, create_runner ]
#    runs-on: [ self-hosted, "${{ needs.create_runner.outputs.runner_name }}" ]
#    strategy:
#      matrix:
#        environment: [ dev, uat, prod ]
#    environment:
#      name: ${{ matrix.environment }}
#    steps:
#      - name: Deploy
#        if: ${{ matrix.environment == needs.setup.outputs.environment || needs.setup.outputs.environment == 'all' }}
#        uses: pagopa/github-actions-template/aks-deploy@main
#        with:
#          branch: ${{ github.ref_name }}
#          client_id: ${{ vars.CLIENT_ID }}
#          tenant_id: ${{ vars.TENANT_ID }}
#          subscription_id: ${{ vars.SUBSCRIPTION_ID }}
#          env: ${{ inputs.environment }}
#          namespace: ${{ env.NAMESPACE }}
#          cluster_name: ${{ vars.CLUSTER_NAME }}
#          resource_group: ${{ vars.CLUSTER_RESOURCE_GROUP_NAME }}
#          app_name: ${{ env.APP_NAME }}
#          helm_upgrade_options: ${{( inputs.beta && '--set microservice-chart.deployment.create=false') || '' }}
#
#  cleanup_runner:
#    name: Cleanup Runner
#    needs: [ setup, release, image, create_runner, deploy ]
#    runs-on: ubuntu-22.04
#    strategy:
#      matrix:
#        environment: [ dev, uat, prod ]
#    environment:
#      name: ${{ matrix.environment }}
#    steps:
#      - name: Cleanup GitHub Runner
#        if: ${{ (success() || failure()) && (matrix.environment == needs.setup.outputs.environment || needs.setup.outputs.environment == 'all') }}
#        id: cleanup_github_runner
#        # from https://github.com/pagopa/github-self-hosted-runner-azure-cleanup-action/commits/main
#        uses: pagopa/github-self-hosted-runner-azure-cleanup-action@97731a35e6ffc79b66c4dfd2aae5e4fd04e3ebb5
#        with:
#          client_id: ${{ vars.CLIENT_ID }}
#          tenant_id: ${{ vars.TENANT_ID }}
#          subscription_id: ${{ vars.SUBSCRIPTION_ID }}
#          resource_group_name: ${{ vars.RESOURCE_GROUP_NAME }}
#          runner_name: ${{ needs.create_runner.outputs.runner_name }}
#          pat_token: ${{ secrets.BOT_TOKEN_GITHUB }}

  deploy:
    name: Deploy on AKS
    needs: [ setup, release, image ]
    if: ${{ always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
    strategy:
      matrix:
        environment: [ dev, uat, prod ]
    uses: ./.github/workflows/self_hosted.yml
    with:
      target: ${{ matrix.environment }}
      environment: ${{ needs.setup.outputs.environment }}
      beta: ${{ inputs.beta }}
    secrets: inherit

#  notify:
#    needs: [ deploy ]
#    runs-on: ubuntu-latest
#    name: Notify
#    if: always()
#    steps:
#      - name: Report Status
#        if: always()
#        uses: ravsamhq/notify-slack-action@v2
#        with:
#          status: ${{ needs.deploy.result }}
#          token: ${{ secrets.GITHUB_TOKEN }}
#          notify_when: 'failure,skipped'
#          notification_title: '{workflow} has {status_message}'
#          message_format: '{emoji} <{workflow_url}|{workflow}> {status_message} in <{repo_url}|{repo}>'
#          footer: 'Linked to Repo <{repo_url}|{repo}>'
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

name: Create Dashboard

# Controls when the workflow will run
on:
  push:
    branches:
      - main
    paths:
      - 'openapi/**'
      - '.github/workflows/create_dashboard.yaml'
      - '.opex/**'

  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  deployments: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  dashboard:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        environment: [prod]
        product: [node, auth]
    environment:
      name: ${{ matrix.environment }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        id: checkout
        # from https://github.com/actions/checkout/commits/main
        uses: actions/checkout@1f9a0c22da41e6ebfa534300ef656657ea2c6707
        with:
          persist-credentials: false

      # from https://github.com/pagopa/opex-dashboard-azure-action/
      - uses: pagopa/opex-dashboard-azure-action@v1.1.2
        with:
          environment: ${{ matrix.environment }}
          api-name: ${{ matrix.product }}
          config: .opex/env/${{ matrix.environment }}/config.yaml
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          # from https://github.com/pagopa/opex-dashboard-azure-action/pkgs/container/opex-dashboard-azure-action
          docker-version: sha256:e4245954566cd3470e1b5527d33bb58ca132ce7493eac01be9e808fd25a11c8d

  delete_github_deployments:
    runs-on: ubuntu-latest
    needs: dashboard
    if: ${{ always() }}
    steps:
      - name: Delete Previous deployments
        uses: actions/github-script@v6
        env:
          SHA_HEAD: ${{ (github.event_name == 'pull_request' && github.event.pull_request.head.sha) || github.sha}}
        with:
          script: |
            const { SHA_HEAD } = process.env

            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: SHA_HEAD
            });
            await Promise.all(
              deployments.data.map(async (deployment) => {
                await github.rest.repos.createDeploymentStatus({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  deployment_id: deployment.id,
                  state: 'inactive'
                });
                return github.rest.repos.deleteDeployment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  deployment_id: deployment.id
                });
              })
            );
